{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o","text":"<p>Esta documenta\u00e7\u00e3o fornece uma vis\u00e3o geral da arquitetura do seer.app, diretrizes e processos de desenvolvimento e tem como prop\u00f3sito central auxiliar na constru\u00e7\u00e3o de uma aplica\u00e7\u00e3o organizada.</p>"},{"location":"#guia-de-inicio-rapido","title":"Guia de In\u00edcio R\u00e1pido","text":"<p>Clone o reposit\u00f3rio:</p> <pre><code>https://github.com/SEERDOT/seer.app.git\n</code></pre> <p>Acesse o ambiente virtual (venv):</p> <pre><code>source seer_env/bin/activate\n</code></pre> <p>Execute o servidor de desenvolvimento:</p> <pre><code>python3 manage.py runserver\n</code></pre> <p>Para mais informa\u00e7\u00f5es, contate algu\u00e9m para suporte.</p>"},{"location":"#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>\u251c\u2500\u2500 client_app/        # Aplica\u00e7\u00e3o Privada [Tenant-Specific] (App)\n\u251c\u2500\u2500 public_app/        # Diret\u00f3rio da Aplica\u00e7\u00e3o P\u00fablica (Login/Registro)\n\u251c\u2500\u2500 seer_app/          # Diret\u00f3rio do Projeto Geral\n\u251c\u2500\u2500 seer_env/          # Ambiente Virtual com Bibliotecas\n\u251c\u2500\u2500 README.md/         # Guia b\u00e1sico de inicializa\u00e7\u00e3o\n\u251c\u2500\u2500 manage.py          # Ponto de entrada do CLI do Django\n\u2514\u2500\u2500 requirements.txt   # Depend\u00eancias do Python\n</code></pre>"},{"location":"#tecnologias-principais","title":"Tecnologias Principais","text":"<ul> <li>Frontend: Bootstrap, ApexCharts</li> <li>Backend: Django</li> <li>Banco de Dados: PostgreSQL</li> <li>Deploy: -</li> </ul>"},{"location":"#contatos-e-recursos","title":"Contatos e Recursos","text":"<ul> <li>Respons\u00e1vel: Raphael Suarez</li> <li>Reposit\u00f3rio: GitHub Link</li> </ul>"},{"location":"backend/views/client_home/","title":"P\u00e1gina Inicial do Cliente: <code>client_home</code>","text":"<p>Esta view \u00e9 respons\u00e1vel por exibir a p\u00e1gina principal da \u00e1rea logada de um cliente (tenant). Ela verifica o subdom\u00ednio da requisi\u00e7\u00e3o, valida o tenant correspondente e renderiza a home com dados personalizados do usu\u00e1rio.</p>"},{"location":"backend/views/client_home/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A fun\u00e7\u00e3o <code>client_home</code> \u00e9 protegida por login e renderiza a tela inicial do cliente. Ela:</p> <ul> <li>Extrai o subdom\u00ednio da URL;</li> <li>Verifica se existe um tenant correspondente;</li> <li>Valida a sess\u00e3o do usu\u00e1rio atual;</li> <li>Exibe a home do cliente com dados personalizados.</li> </ul>"},{"location":"backend/views/client_home/#requisitos-e-tecnologias","title":"Requisitos e Tecnologias","text":"<ul> <li>Django: Views, sess\u00f5es e autentica\u00e7\u00e3o com <code>@login_required</code></li> <li>django-tenants: Identifica\u00e7\u00e3o do tenant via subdom\u00ednio</li> <li>Mensagens: Uso de <code>messages.error()</code> para falhas</li> <li>Templates: Renderiza <code>client_app/app/home.html</code></li> </ul>"},{"location":"backend/views/client_home/#logica-da-view","title":"L\u00f3gica da View","text":"<ol> <li>Verifica se o usu\u00e1rio est\u00e1 logado (<code>@login_required</code>);</li> <li>Extrai o subdom\u00ednio da requisi\u00e7\u00e3o (<code>request.get_host()</code> \u2192 <code>empresa-x</code>);</li> <li> <p>Busca o tenant correspondente no banco (<code>Client.objects.get(schema_name=subdomain)</code>):</p> </li> <li> <p>Se n\u00e3o existir, exibe uma mensagem de erro e redireciona para a p\u00e1gina de login p\u00fablica;</p> </li> <li> <p>Se existir, continua.</p> </li> <li> <p>Coleta o nome do usu\u00e1rio logado (<code>request.user.username</code>);</p> </li> <li>Renderiza a home do cliente com contexto personalizado:</li> <li><code>name</code>: nome do subdom\u00ednio capitalizado (ex: <code>Empresa-x</code>)</li> <li><code>username</code>: nome do usu\u00e1rio logado</li> </ol>"},{"location":"backend/views/client_home/#esquema-visual-do-fluxo","title":"Esquema Visual do Fluxo","text":"<pre><code>graph TD\n    A[Usu\u00e1rio acessa client_home (logado)] --&gt; B[Extrai subdom\u00ednio da URL]\n    B --&gt; C[Busca Tenant no Banco]\n    C --&gt;|Existe| D[Coleta nome do usu\u00e1rio]\n    D --&gt; E[Renderiza template da home]\n    C --&gt;|N\u00e3o Existe| F[Exibe erro: Usu\u00e1rio Inv\u00e1lido]\n    F --&gt; G[Redireciona para Login P\u00fablico]\n</code></pre>"},{"location":"backend/views/client_home/#consideracoes-finais","title":"Considera\u00e7\u00f5es Finais","text":"<p>A view client_home \u00e9 um ponto de entrada seguro e personalizado para a \u00e1rea interna de cada empresa (tenant). Ao identificar dinamicamente o tenant via subdom\u00ednio e renderizar conte\u00fado adaptado, ela refor\u00e7a o isolamento entre empresas e oferece uma experi\u00eancia consistente ao usu\u00e1rio.</p>"},{"location":"backend/views/complete_login/","title":"Documenta\u00e7\u00e3o da View <code>complete_login</code>","text":""},{"location":"backend/views/complete_login/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A view <code>complete_login</code> \u00e9 um componente essencial no processo de autentica\u00e7\u00e3o de um sistema multi-tenant. Ela representa a segunda etapa de um login em duas fases: ap\u00f3s o usu\u00e1rio ser identificado, essa view recebe a senha, valida a exist\u00eancia da empresa (tenant) via subdom\u00ednio e autentica as credenciais do usu\u00e1rio no schema correto daquela empresa.</p>"},{"location":"backend/views/complete_login/#modelos-e-tabelas-utilizados","title":"Modelos e Tabelas Utilizados","text":"<ul> <li> <p>Client (Tenant): Modelo principal do <code>django-tenants</code>, representa uma empresa/cliente. Serve para identificar o schema (banco de dados) com base no subdom\u00ednio acessado.</p> </li> <li> <p>User (Usu\u00e1rio): Modelo de usu\u00e1rio do Django (padr\u00e3o ou customizado). A autentica\u00e7\u00e3o verifica as credenciais dentro do schema do tenant ativo.</p> </li> </ul>"},{"location":"backend/views/complete_login/#fluxo-de-execucao-da-view","title":"Fluxo de Execu\u00e7\u00e3o da View","text":""},{"location":"backend/views/complete_login/#1-requisicao-get-exibicao-da-pagina","title":"1. Requisi\u00e7\u00e3o GET \u2014 Exibi\u00e7\u00e3o da P\u00e1gina","text":"<p>Objetivo: Renderizar a p\u00e1gina para o usu\u00e1rio digitar sua senha.</p> <p>Processo:</p> <ol> <li>O usu\u00e1rio \u00e9 redirecionado para essa view ap\u00f3s a primeira etapa de login (identifica\u00e7\u00e3o do username).</li> <li>A fun\u00e7\u00e3o renderiza o template <code>client_app/auth/complete_login.html</code>.</li> <li>O username \u00e9 passado no contexto do template (ex: \"Ol\u00e1, fulano. Por favor, digite sua senha.\").</li> </ol>"},{"location":"backend/views/complete_login/#2-requisicao-post-submissao-do-formulario","title":"2. Requisi\u00e7\u00e3o POST \u2014 Submiss\u00e3o do Formul\u00e1rio","text":"<p>Objetivo: Validar a senha, o tenant e efetuar o login.</p> <p>Processo:</p> <ol> <li> <p>Coleta de Dados </p> <ul> <li>A senha \u00e9 extra\u00edda do <code>request.POST</code>.</li> </ul> </li> <li> <p>Identifica\u00e7\u00e3o do Tenant </p> <ul> <li>O host da requisi\u00e7\u00e3o (ex: <code>empresa-a.seusite.com</code>) \u00e9 capturado.</li> <li>O subdom\u00ednio (ex: <code>empresa-a</code>) \u00e9 isolado e usado como <code>schema_name</code>.</li> <li>O sistema tenta buscar um objeto <code>Client</code> correspondente a esse <code>schema_name</code>.</li> </ul> </li> <li> <p>Valida\u00e7\u00e3o do Tenant </p> <ul> <li>Se n\u00e3o for encontrado, exibe-se uma mensagem de erro (\"Empresa inexistente\") e o usu\u00e1rio \u00e9 redirecionado para a p\u00e1gina de login p\u00fablica.</li> </ul> </li> <li> <p>Ativa\u00e7\u00e3o do Schema do Tenant </p> <ul> <li>Se o tenant existir, o sistema troca o schema de banco de dados para o da empresa com <code>schema_context()</code>. A partir da\u00ed, todas as opera\u00e7\u00f5es de banco de dados ocorrer\u00e3o somente dentro daquele tenant.</li> </ul> </li> <li> <p>Autentica\u00e7\u00e3o do Usu\u00e1rio </p> <ul> <li>A fun\u00e7\u00e3o <code>authenticate()</code> \u00e9 chamada com o <code>username</code> e a <code>password</code>.</li> <li> <p>Se a autentica\u00e7\u00e3o for bem-sucedida:</p> <ul> <li>A fun\u00e7\u00e3o <code>login()</code> \u00e9 chamada para iniciar a sess\u00e3o.</li> <li>O usu\u00e1rio \u00e9 redirecionado para a p\u00e1gina principal da empresa (<code>client_app:client_home</code>).</li> </ul> </li> <li> <p>Se falhar:</p> <ul> <li>Uma mensagem de erro (\"Usu\u00e1rio ou senha incorretos\") \u00e9 exibida.</li> <li>O usu\u00e1rio \u00e9 redirecionado para a p\u00e1gina de login p\u00fablica.</li> </ul> </li> </ul> </li> </ol>"},{"location":"backend/views/complete_login/#dependencias-e-contexto","title":"Depend\u00eancias e Contexto","text":"<ul> <li> <p>django-tenants: Biblioteca que permite multi-tenancy no Django. A identifica\u00e7\u00e3o do schema e uso do <code>schema_context()</code> s\u00e3o cruciais para garantir a separa\u00e7\u00e3o entre empresas.</p> </li> <li> <p>Autentica\u00e7\u00e3o Django: Usa <code>authenticate()</code> e <code>login()</code> do m\u00f3dulo <code>django.contrib.auth</code>.</p> </li> <li> <p>Framework de Mensagens: Usa <code>messages.error()</code> para exibir mensagens de erro sem interromper o fluxo.</p> </li> </ul>"},{"location":"backend/views/complete_login/#fluxo-visual-post","title":"Fluxo Visual (POST)","text":"<pre><code>graph TD\n    A[In\u00edcio: Usu\u00e1rio envia POST com senha] --&gt; B{Identificar Tenant pelo Subdom\u00ednio}\n    B --&gt; C{Tenant Existe?}\n    C -- Sim --&gt; D[Ativar Schema do Tenant]\n    D --&gt; E{Autenticar Usu\u00e1rio no Schema}\n    E -- Sucesso --&gt; F[Login do Usu\u00e1rio]\n    F --&gt; G[Redirecionar para Home do Cliente]\n    E -- Falha --&gt; H[Erro: Usu\u00e1rio ou Senha Incorretos]\n    H --&gt; I[Redirecionar para Login P\u00fablico]\n    C -- N\u00e3o --&gt; J[Erro: Empresa Inexistente]\n    J --&gt; I\n</code></pre>"},{"location":"backend/views/complete_login/#consideracoes-finais","title":"Considera\u00e7\u00f5es Finais","text":"<p>A fun\u00e7\u00e3o complete_login \u00e9 uma implementa\u00e7\u00e3o robusta e segura para o login em ambientes multi-tenant. Ela garante a separa\u00e7\u00e3o l\u00f3gica e de dados entre os diferentes clientes da plataforma, direcionando corretamente a tentativa de autentica\u00e7\u00e3o para o banco de dados isolado da empresa correspondente, o que \u00e9 um pilar fundamental de seguran\u00e7a e funcionamento para este tipo de arquitetura.</p>"}]}